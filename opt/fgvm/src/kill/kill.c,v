head     1.2;
access   ;
symbols  ;
locks    root:1.2; strict;
comment  @ * @;


1.2
date     99.05.06.15.42.15;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     99.05.06.11.15.12;  author root;  state Exp;
branches ;
next     ;


desc
@Port of OpenBSD kill to HP-UX.
@


1.2
log
@Removed debugging messages and fixed up 
wrong argument in pstat call.
@
text
@#define DEBUGGING 0
/*	$OpenBSD: kill.c,v 1.3 1997/02/06 13:29:08 deraadt Exp $	*/
/*	$NetBSD: kill.c,v 1.11 1995/09/07 06:30:27 jtc Exp $	*/

/*
 * Copyright (c) 1988, 1993, 1994, 1999
 *      Greg Baker (greg.baker@@aptec.net.au) -- 1999 partition changes
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1988, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)kill.c	8.4 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: kill.c,v 1.3 1997/02/06 13:29:08 deraadt Exp $";
#endif
#endif /* not lint */

#include <ctype.h>
#ifndef _HPUX_
#include <err.h>
#endif
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#ifdef _HPUX_
int signame_to_signum();
#else
void nosig __P((char *));
void printsignals __P((FILE *));
int signame_to_signum __P((char *));
void usage __P((void));
#endif


#ifdef _HPUX_
char *sys_signame [] =
{
"NOTHING",
"HUP",		/* hangup */
"INT",	/* Interrupt */
"QUIT",		/* quit */
"ILL",	/* Illegal instruction (not reset when 
				   caught) */
"TRAP",	/* trace trap (not reset when caught) */
"ABRT",	/* Process abort signal */
"EMT",	/* EMT instruction */
"FPE",	/* Floating point exception */
"KILL",	/* kill (cannot be caught of ignored) */
"BUS",	/* bus error */
"SEGV",	/* Segmentation violation */
"SYS",	/* bad argument to system call */
"PIPE",	/* write on a pipe with no one to read it */
"ALRM",	/* alarm clock */
"TERM",	/* Software termination signal from kill */
"USR1",	/* user defined signal 1 */
"USR2",	/* user defined signal 2 */
"CHLD",	/* Child process terminated or stopped */
"PWR",	/* power state indication */
"VTALRM",	/* virtual timer alarm */
"PROF",	/* profiling timer alarm */
"IO",	/* asynchronous I/O */
"WINCH",	/* window size change signal */
"STOP",	/* Stop signal (cannot be caught or ignored) */
"TSTP",	/* Interactive stop signal */
"CONT",	/* Continue if stopped */
"TTIN",	/* Read from control terminal attempted by a
			  	   member of a background process group */
"TTOU",	/* Write to control terminal attempted by a 
				   member of a background process group */
"URG",	/* urgent condition on IO channel */
"LOST",  /* remote lock lost  (NFS)        */
"RESERVE", /* Save for future use */
"DIL",	/* DIL signal */
"XCPU",	/* CPU time limit exceeded (setrlimit)  */
"XFSZ",	/* CPU file size limit exceeded (setrlimit)  */
"CANCEL",  /* Used for pthread cancellation. */
"GFAULT"      /* Graphics framebuffer fault */
};

/* this following line produces warnings,  but I don't care. It's safer this way.*/
#define NSIG 35
#endif

/***********************************************************************/
/* Now we get to the fun stuff.  We need some way of determining whether*/
/* a given process has the same root as we do. */

#ifdef _HPUX_
#include <sys/param.h>
#include <sys/pstat.h>

int has_same_root(pid)
       int pid;
{
 struct pst_status target_pst;
 struct pst_status my_pst;
 int selftarget = (int)getpid();

 if (pstat_getproc(&my_pst, sizeof(my_pst), (size_t)0, selftarget) == -1) {
	perror("pstat_getproc of self");
        exit(1);
 }

 if (pstat_getproc(&target_pst, sizeof(target_pst), (size_t)0, pid) == -1) {
	perror("pstat_getproc of target");
        exit(1);
 }
#if DEBUGGING
 printf("My rdir is %d:%d,%d:%d ; target pid (%d) has an rdir of %d:%d,%d:%d\n",
        my_pst.pst_rdir.psf_fsid.psfs_id >> 32,
        my_pst.pst_rdir.psf_fsid.psfs_id & 0xffffffff,
        my_pst.pst_rdir.psf_fileid >> 32,
        my_pst.pst_rdir.psf_fileid & 0xffffffff,
         pid,
        target_pst.pst_rdir.psf_fsid.psfs_id >> 32,
        target_pst.pst_rdir.psf_fsid.psfs_id & 0xffffffff,
        target_pst.pst_rdir.psf_fileid >> 32,
        target_pst.pst_rdir.psf_fileid & 0xffffffff
    );
#endif 

 return 
        (my_pst.pst_rdir.psf_fsid.psfs_id ==
            target_pst.pst_rdir.psf_fsid.psfs_id) &&
        (my_pst.pst_rdir.psf_fileid == 
            target_pst.pst_rdir.psf_fileid);
}
#endif


signame_to_signum(sig)
	char *sig;
{
	int n;

	if (!strncasecmp(sig, "sig", 3))
		sig += 3;
	for (n = 1; n < NSIG; n++) {
		if (!strcasecmp(sys_signame[n], sig))
			return (n);
	}
	return (-1);
}

void
printsignals(fp)
	FILE *fp;
{
	int n;

	for (n = 1; n < NSIG; n++) {
		(void)fprintf(fp, "%s", sys_signame[n]);
		if (n == (NSIG / 2) || n == (NSIG - 1))
			(void)fprintf(fp, "\n");
		else
			(void)fprintf(fp, " ");
	}
}

void
usage()
{

	(void)fprintf(stderr, "usage: kill [-s signal_name] pid ...\n");
	(void)fprintf(stderr, "       kill -l [exit_status]\n");
	(void)fprintf(stderr, "       kill -signal_name pid ...\n");
	(void)fprintf(stderr, "       kill -signal_number pid ...\n");
	exit(1);
}

void
nosig(name)
	char *name;
{

	fprintf(stderr,"unknown signal %s; valid signals:", name);
	printsignals(stderr);
	exit(1);
}


int
main(argc, argv)
	int argc;
	char *argv[];
{
	int errors, numsig, pid;
	char *ep;

	if (argc < 2)
		usage();

	numsig = SIGTERM;

	argc--, argv++;
	if (!strcmp(*argv, "-l")) {
		argc--, argv++;
		if (argc > 1)
			usage();
		if (argc == 1) {
			if (!isdigit(**argv))
				usage();
			numsig = strtol(*argv, &ep, 10);
			if (!*argv || *ep) {
				fprintf(stderr, "illegal signal number: %s", *argv);
				exit(1);
  			}
			if (numsig >= 128)
				numsig -= 128;
			if (numsig <= 0 || numsig >= NSIG)
				nosig(*argv);
			printf("%s\n", sys_signame[numsig]);
			exit(0);
		}
		printsignals(stdout);
		exit(0);
	}

	if (!strcmp(*argv, "-s")) {
		argc--, argv++;
		if (argc < 1) {
			fprintf(stderr,"option requires an argument -- s");
			usage();
		}
		if (strcmp(*argv, "0")) {
			if ((numsig = signame_to_signum(*argv)) < 0)
				nosig(*argv);
		} else
			numsig = 0;
		argc--, argv++;
	} else if (**argv == '-') {
		++*argv;
		if (isalpha(**argv)) {
			if ((numsig = signame_to_signum(*argv)) < 0)
				nosig(*argv);
		} else if (isdigit(**argv)) {
			numsig = strtol(*argv, &ep, 10);
			if (*ep) {
				fprintf(stderr, "illegal signal number: %s", *argv);
				exit(1);
			}
			if (numsig < 0 || numsig >= NSIG)
				nosig(*argv);
		} else
			nosig(*argv);
		argc--, argv++;
	}

	if (argc == 0)
		usage();

	for (errors = 0; argc; argc--, argv++) {
		pid = strtol(*argv, &ep, 10);
		if (!**argv || *ep) {
			fprintf(stderr,"illegal process id: %s", *argv);
			errors = 1;
#ifdef _HPUX_
		} else  if (!has_same_root(pid)) {
 			fprintf(stderr,"pid %d is not in this partition\n",pid); 
			errors = 1;
#endif _HPUX_
                } else if (kill(pid, numsig) == -1) {
			fprintf(stderr,"%s", *argv);
			errors = 1;
		}
	}

	exit(errors);
}


@


1.1
log
@Initial revision
@
text
@d1 1
d6 2
a7 1
 * Copyright (c) 1988, 1993, 1994
d123 3
d127 43
d296 6
a301 1
		} else if (kill(pid, numsig) == -1) {
@
